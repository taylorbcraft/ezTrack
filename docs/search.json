[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Taylor Craft Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"vignette demonstrates full ezTrack workflow: importing tracking data non-standard column names, cleaning standardizing , converting spatial object, generating summary tables, visualizing fix rates latitude time, plotting tracks home ranges interactive map.","code":""},{"path":"/articles/getting-started.html","id":"import-and-format-tracking-data","dir":"Articles","previous_headings":"","what":"1. Import and format tracking data","title":"Getting Started","text":"pass dataset GPS-tagged migratory shorebirds ez_track(). column names aren’t provided, ez_track() automatically attempt guess columns correspond ID, timestamp, longitude, latitude. automatic column guessing fails guesses incorrectly, can manually specify columns represent ID, timestamp, longitude, latitude. can also subsample dataset using subsample() argument, limits number location fixes per time unit. Use simple string format “1 per hour” “2 per day” control sampling frequency.","code":"data(godwit_tracks) head(godwit_tracks) #>      individual.local.identifier           timestamp location.long location.lat #> 3935                     animal1 2024-12-31 16:00:00     -15.84644     16.33822 #> 3936                     animal1 2024-12-31 20:00:00     -15.82790     16.38281 #> 3937                     animal1 2024-12-31 22:00:00     -15.82829     16.38226 #> 3938                     animal1 2025-01-01 00:00:00     -15.82715     16.38327 #> 3939                     animal1 2025-01-01 04:00:00     -15.82761     16.38304 #> 3940                     animal1 2025-01-01 10:00:00     -15.84629     16.32770  tracks <- ez_track(   data = godwit_tracks ) #> Detected columns - id: individual.local.identifier, timestamp: timestamp, x: location.long, y: location.lat #> Removed 852 row(s) with missing or duplicate values. tracks_manual <- ez_track(   data = godwit_tracks,   id = 'individual.local.identifier',   timestamp = 'timestamp',   x = 'location.long',   y = 'location.lat', ) #> Detected columns - id: individual.local.identifier, timestamp: timestamp, x: location.long, y: location.lat #> Removed 852 row(s) with missing or duplicate values. tracks_subsampled <- ez_track(   data = godwit_tracks,   subsample = \"2 per hour\" ) #> Detected columns - id: individual.local.identifier, timestamp: timestamp, x: location.long, y: location.lat #> Removed 852 row(s) with missing or duplicate values. #> Subsampled to 2 fix(es) per hour"},{"path":"/articles/getting-started.html","id":"tracking-data-summary-reports","dir":"Articles","previous_headings":"","what":"2. Tracking data summary reports","title":"Getting Started","text":"Summary reports can computed individual using ez_summary(). easy use reports presentations, HTML reports can generated using report = TRUE. Summaries can also filtered date using start_date end_date arguments. following summary statistics returned unique id: n_fixes: Number location records first_location: Timestamp first recorded location last_location: Timestamp last recorded location tracking_duration_days: Duration first last fix (days) fixes_per_day: Average number fixes per day median_interval_hours: Median interval fixes (hours) max_time_gap_days: Longest time gap consecutive fixes (days) distance_km: Total distance traveled (kilometers), calculated using Haversine formula avg_speed_kmh: Average speed (km/h), computed distance divided tracking duration hours","code":"summary_table <- ez_summary(tracks) summary_table #>        id n_fixes      first_location       last_location #> 1 animal1    1095 2024-12-31 16:00:00 2025-04-25 14:00:00 #> 2 animal2    1153 2024-12-31 16:00:00 2025-04-27 22:00:00 #> 3 animal3    1022 2024-12-31 16:00:00 2025-04-23 16:00:00 #> 4 animal4     214 2024-12-31 16:00:00 2025-04-27 16:00:00 #> 5 animal5     223 2024-12-31 16:00:00 2025-04-27 16:00:00 #> 6 animal6     551 2024-12-31 16:00:00 2025-04-27 16:00:00 #>   tracking_duration_days fixes_per_day median_interval_hours max_time_gap_days #> 1                 114.92          9.53                     2              0.33 #> 2                 117.25          9.83                     2              1.00 #> 3                 113.00          9.04                     2              1.00 #> 4                 117.00          1.83                     6             10.00 #> 5                 117.00          1.91                     6             13.38 #> 6                 117.00          4.71                     4              1.00 #>   distance_km avg_speed_kmh #> 1     5649.19          2.05 #> 2     5495.39          1.95 #> 3     6370.80          2.35 #> 4     2414.07          0.86 #> 5     2372.16          0.84 #> 6     5438.92          1.94"},{"path":"/articles/getting-started.html","id":"visualize-latitude-over-time","dir":"Articles","previous_headings":"","what":"3. Visualize latitude over time","title":"Getting Started","text":"ez_latitude_plot() can used visualize latitudinal movement (north-south) time tracked animal.  plot supports: Optional faceting individual Date axis customization Date range filtering ggplot2 parameters customization.","code":"ez_latitude_plot(tracks) ez_latitude_plot(   tracks,   facet = TRUE,   start_date = \"2025-01-01\",   end_date = \"2025-04-28\",   date_breaks = \"2 months\",   date_format = \"%b\" )"},{"path":"/articles/getting-started.html","id":"visualize-fix-rate-over-time","dir":"Articles","previous_headings":"","what":"4. Visualize fix rate over time","title":"Getting Started","text":"ez_fix_rate_plot() can used visualize fix rates time tracked animal, using tick mark represent location fix.  plot supports: Date axis customization Date range filtering ggplot2 parameters customization.","code":"ez_fix_rate_plot(tracks)"},{"path":"/articles/getting-started.html","id":"map-tracks-and-home-ranges","dir":"Articles","previous_headings":"","what":"5. Map tracks and home ranges","title":"Getting Started","text":"can display tracks using interactive Leaflet map ez_map() simple command. well date range filters variety style arguments.","code":"ez_map(tracks) ez_map(tracks,   start_date = \"2025-04-10\",   end_date = \"2025-04-28\",   point_color = \"timestamp\",   point_size = 2,   path_opacity = 0.3)"},{"path":"/articles/getting-started.html","id":"estimate-home-ranges","dir":"Articles","previous_headings":"","what":"6. Estimate home ranges","title":"Getting Started","text":"Individual population-level Minimum Convex Polygons (MCP) Kernel Density Estimate (KDE) home ranges can created ez_home_range(). result sf object containing one home range polygon per tracked individual population (population = TRUE). Home ranges can visualized ez_map. Home ranges can also mapped alongside tracking data. example, use start_date argument ensure tracking data aligns temporally home range period.","code":"home_ranges_mcp <- ez_home_range(tracks, method = 'mcp', level = 95, start_date = '2025-04-12') #> Registered S3 methods overwritten by 'adehabitatMA': #>   method                       from #>   print.SpatialPixelsDataFrame sp   #>   print.SpatialPixels          sp ez_map(home_ranges = home_ranges_mcp) ez_map(tracks, home_ranges = home_ranges_mcp, start_date = '2025-04-12')"},{"path":"/articles/getting-started.html","id":"developer-notes","dir":"Articles","previous_headings":"","what":"Developer notes","title":"Getting Started","text":"update vignette pkgdown site: pkgdown::build_site()","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Taylor Craft. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Craft T (2025). ezTrack: Tools Exploring Animal Movement Data. R package version 0.1.0, https://github.com/taylorbcraft/ezTrack.","code":"@Manual{,   title = {ezTrack: Tools for Exploring Animal Movement Data},   author = {Taylor Craft},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/taylorbcraft/ezTrack}, }"},{"path":"/index.html","id":"eztrack","dir":"","previous_headings":"","what":"Tools for Exploring Animal Movement Data","title":"Tools for Exploring Animal Movement Data","text":"ezTrack lightweight R package exploring animal tracking data. offers gentle, beginner-friendly workflow go raw telemetry data clean summaries, interactive maps, home range estimates minimal data wrangling. View vignette","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Exploring Animal Movement Data","text":"","code":"# Install development version from GitHub # install.packages(\"devtools\") devtools::install_github(\"taylorbcraft/ezTrack\")"},{"path":[]},{"path":"/index.html","id":"ez_track---clean--standardize-tracking-data","dir":"","previous_headings":"Key functions","what":"ez_track() - Clean & standardize tracking data","title":"Tools for Exploring Animal Movement Data","text":"Auto-detects columns id, timestamp, x, y Supports CSV, Excel, shapefiles (.shp), GeoPackages (.gpkg) files Also accepts data.frame, sf, Spatial*, move objects Removes rows missing duplicate (id, timestamp) combinations Returns clean data frame (optionally) sf object projected WGS84 Supports time-based subsampling (e.g., “1 per hour”, “2 per day”)","code":"tracking_data <- ez_track(\"my_tracking_file.csv\")"},{"path":"/index.html","id":"ez_summary---quick-data-summary","dir":"","previous_headings":"Key functions","what":"ez_summary() - Quick data summary","title":"Tools for Exploring Animal Movement Data","text":"Per-ID stats: duration, fixes/day, distance, speed Filters date range Optional HTML report: ez_summary(tracking_data, report = TRUE)","code":"ez_summary(tracking_data)"},{"path":"/index.html","id":"ez_fix_rate_plot---plot-location-fix-rate","dir":"","previous_headings":"Key functions","what":"ez_fix_rate_plot() - Plot location fix rate","title":"Tools for Exploring Animal Movement Data","text":"Displays animal’s location fixes tick marks time Helps visualize tracking effort, data gaps, fix frequency Supports date filtering x-axis formatting options","code":"ez_fix_rate_plot(tracking_data)"},{"path":"/index.html","id":"ez_home_range---estimate-home-ranges","dir":"","previous_headings":"Key functions","what":"ez_home_range() - Estimate home ranges","title":"Tools for Exploring Animal Movement Data","text":"Supports MCP KDE methods Returns sf polygon(s) Estimate per animal overall population","code":"ranges <- ez_home_range(tracking_data, method = \"mcp\", level = 95)"},{"path":"/index.html","id":"ez_map---plot-tracks-on-interactive-leaflet-maps","dir":"","previous_headings":"Key functions","what":"ez_map() - Plot tracks on interactive Leaflet maps","title":"Tools for Exploring Animal Movement Data","text":"Visualize tracks, points, home ranges Customize colors, radius, opacity, labels Toggle satellite light basemaps","code":"ez_map(tracking_data)"},{"path":"/index.html","id":"ez_latitude_plot---plot-latitude-over-time","dir":"","previous_headings":"Key functions","what":"ez_latitude_plot() - Plot latitude over time","title":"Tools for Exploring Animal Movement Data","text":"Creates time series plot latitude (y-axis) timestamp (x-axis) Optionally facets plot animal allows customization x-axis date format break spacing","code":"ez_latitude_plot(tracking_data)"},{"path":"/index.html","id":"example-workflow","dir":"","previous_headings":"","what":"Example Workflow","title":"Tools for Exploring Animal Movement Data","text":"","code":"library(ezTrack)  # Step 1: Import data(godwit_tracks)  # Step 2: Standardize trk <- ez_track(godwit_tracks)  # Step 3: Summarize ez_summary(trk)  # Step 4: Check fix rates ez_fix_rate_plot(trk)  # Step 5: Compute home ranges hr <- ez_home_range(trk)  # Step 6: Map tracks and home ranges ez_map(trk, home_ranges = hr)  # Step 7: Latitude plot ez_latitude_plot(trk)"},{"path":"/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Tools for Exploring Animal Movement Data","text":"sf, leaflet, geosphere, adehabitatHR: spatial operations, mapping, home range analysis readxl: Excel import support knitr, kableExtra, htmltools: HTML reporting ggplot2, viridisLite: plotting color palettes magrittr: %>% pipe mapping function Install missing packages using:","code":"install.packages(c(   \"sf\", \"leaflet\", \"geosphere\", \"adehabitatHR\", \"readxl\",   \"knitr\", \"kableExtra\", \"htmltools\", \"ggplot2\", \"viridisLite\", \"magrittr\", \"dplyr\" ))"},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Tools for Exploring Animal Movement Data","text":"MIT License © 2025 Taylor Craft","code":""},{"path":"/index.html","id":"contributing--issues","dir":"","previous_headings":"","what":"Contributing / Issues","title":"Tools for Exploring Animal Movement Data","text":"Feel free open issue submit pull request. Suggestions welcome!","code":""},{"path":"/reference/ez_fix_rate_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot fix rate timelines — ez_fix_rate_plot","title":"Plot fix rate timelines — ez_fix_rate_plot","text":"Creates timeline plot showing fix events horizontal tick marks individual. allows quick visual assessment tracking effort, fix density, coverage gaps.","code":""},{"path":"/reference/ez_fix_rate_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot fix rate timelines — ez_fix_rate_plot","text":"","code":"ez_fix_rate_plot(   data,   date_breaks = NULL,   date_format = NULL,   start_date = NULL,   end_date = NULL )"},{"path":"/reference/ez_fix_rate_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot fix rate timelines — ez_fix_rate_plot","text":"data data frame `sf` object columns `id` `timestamp`. date_breaks Optional. Spacing x-axis breaks (e.g., \"1 month\", \"2 weeks\"). `NULL`, ggplot2 chooses automatically. date_format Optional. Format string x-axis date labels (e.g., \"%b %Y\", \"%d-%m\"). `NULL`, ggplot2 chooses automatically. start_date Optional. `Date` string (e.g., \"2024-01-01\"). Filters fixes date. end_date Optional. `Date` string (e.g., \"2024-12-31\"). Filters fixes date.","code":""},{"path":"/reference/ez_fix_rate_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot fix rate timelines — ez_fix_rate_plot","text":"`ggplot` object showing fix timelines per individual.","code":""},{"path":"/reference/ez_fix_rate_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot fix rate timelines — ez_fix_rate_plot","text":"","code":"df <- data.frame(   id = rep(c(\"a\", \"b\"), each = 3),   timestamp = as.POSIXct(c(\"2025-01-01\", \"2025-01-02\", \"2025-01-03\",                            \"2025-01-01\", \"2025-01-05\", \"2025-01-06\")) ) ez_fix_rate_plot(df)"},{"path":"/reference/ez_home_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate home ranges for tracked individuals or population — ez_home_range","title":"Estimate home ranges for tracked individuals or population — ez_home_range","text":"Computes home range polygons using either Minimum Convex Polygon (MCP) Kernel Density Estimation (KDE).","code":""},{"path":"/reference/ez_home_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate home ranges for tracked individuals or population — ez_home_range","text":"","code":"ez_home_range(   data,   method = \"mcp\",   level = 95,   crs = NULL,   population = FALSE,   start_date = NULL,   end_date = NULL,   kde_extent = 1,   h = \"href\",   hlim = NULL )"},{"path":"/reference/ez_home_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate home ranges for tracked individuals or population — ez_home_range","text":"data data frame `sf` object columns `id`, `timestamp`, `x`, `y`. method Method home range estimation. One \"mcp\" (default) \"kde\". level Percentage points include home range (e.g., 95 95%). Default 95. crs Optional CRS project data calculation. `NULL`, function automatically detect UTM zone dataset centroid reproject data accordingly (units meters). population Logical. TRUE, returns single home range polygon data combined. start_date Optional. `Date` object string (\"YYYY-MM-DD\"). Filters data date. end_date Optional. `Date` object string (\"YYYY-MM-DD\"). Filters data date. kde_extent Numeric. method = \"kde\", passed `adehabitatHR::kernelUD()` control extent grid KDE. Default 1. h Bandwidth method method = \"kde\". One \"href\" (default), \"LSCV\", numeric value. hlim Optional vector length 2 passed `adehabitatHR::kernelUD()` method = \"kde\" constrain bandwidth search (used h = \"LSCV\").","code":""},{"path":"/reference/ez_home_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate home ranges for tracked individuals or population — ez_home_range","text":"`sf` object utilization distribution polygon(s).","code":""},{"path":"/reference/ez_latitude_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot latitude over time — ez_latitude_plot","title":"Plot latitude over time — ez_latitude_plot","text":"Creates time series plot latitude (y-axis) time (x-axis), separate lines individual animal. Optionally facets plot animal allows customization x-axis date format break spacing.","code":""},{"path":"/reference/ez_latitude_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot latitude over time — ez_latitude_plot","text":"","code":"ez_latitude_plot(   data,   color_palette = \"turbo\",   facet = FALSE,   date_format = NULL,   date_breaks = NULL,   start_date = NULL,   end_date = NULL )"},{"path":"/reference/ez_latitude_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot latitude over time — ez_latitude_plot","text":"data data frame `sf` object columns `id`, `timestamp`, `y` (latitude). color_palette Character. Viridis palette option: \"viridis\", \"magma\", \"plasma\", \"inferno\", \"cividis\", \"turbo\". Default \"turbo\". facet Logical. TRUE, creates separate facet panel animal. Default FALSE. date_format Optional. Format date labels x-axis (e.g., \"%b %d\", \"%Y-%m\", \"%H:%M\"). Default automatic. date_breaks Optional. Interval x-axis breaks (e.g., \"1 day\", \"2 weeks\"). Default automatic. start_date Optional. `Date` object string (e.g., \"2023-01-01\"). Filters data date. end_date Optional. `Date` object string (e.g., \"2023-02-01\"). Filters data date.","code":""},{"path":"/reference/ez_latitude_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot latitude over time — ez_latitude_plot","text":"ggplot object.","code":""},{"path":"/reference/ez_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot tracking data and home ranges — ez_map","title":"Plot tracking data and home ranges — ez_map","text":"unified function visualizing tracking data home range polygons interactive map. Accepts tracking points (`ez_track`) home ranges (`ez_home_range`), allows layer-specific customization appearance filtering time.","code":""},{"path":"/reference/ez_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot tracking data and home ranges — ez_map","text":"","code":"ez_map(   tracks = NULL,   home_ranges = NULL,   individual = NULL,   show_points = TRUE,   show_paths = TRUE,   point_color = \"id\",   point_size = 4,   point_opacity = 0.8,   point_stroke = TRUE,   point_stroke_color = \"black\",   path_color = \"id\",   path_width = 2,   path_opacity = 1,   polygon_color = \"id\",   polygon_opacity = 0.4,   color_palette = \"viridis\",   show_labels = TRUE,   start_date = NULL,   end_date = NULL )"},{"path":"/reference/ez_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot tracking data and home ranges — ez_map","text":"tracks Output `ez_track()` — data frame `sf` `id`, `timestamp`, `x`, `y`. home_ranges Output `ez_home_range()` `sf` polygon object. individual Optional. Character character vector individual ID(s) display. show_points Logical, whether draw individual locations. Default TRUE. show_paths Logical, whether draw movement paths. Default TRUE. point_color Column name static color points. Default \"id\". Can also \"timestamp\" temporal gradient. point_size Radius point markers. Default 4. point_opacity Fill opacity points. Default 0.8. point_stroke Logical, whether draw point borders. Default TRUE. point_stroke_color Border color points. Default \"black\". path_color Column name static color paths. Default \"id\". path_width Line width movement paths. Default 2. path_opacity Opacity path lines. Default 1. polygon_color Column name static color home range polygons. Default \"id\". polygon_opacity Fill opacity polygons. Default 0.4. color_palette Color palette use mapped variables. Default \"viridis\". show_labels Logical, whether show hover labels locations. Default TRUE. start_date Optional filter (Date string) remove data date. end_date Optional filter (Date string) remove data date.","code":""},{"path":"/reference/ez_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot tracking data and home ranges — ez_map","text":"`leaflet` map object.","code":""},{"path":"/reference/ez_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot tracking data and home ranges — ez_map","text":"","code":"# Simulate tracks tracks <- data.frame(   id = rep(c(\"A\", \"B\"), each = 10),   timestamp = rep(seq.POSIXt(as.POSIXct(\"2023-01-01\"), by = \"1 day\", length.out = 10), 2),   x = c(runif(10, -1, 1), runif(10, 0, 2)),   y = c(runif(10, 51, 52), runif(10, 51.5, 52.5)) )  # Plot map ez_map(tracks, point_color = \"timestamp\")  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addProviderTiles\",\"args\":[\"Esri.WorldImagery\",null,\"Satellite\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB.Positron\",null,\"Light\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addLayersControl\",\"args\":[[\"Satellite\",\"Light\"],[\"Tracks\",\"Polygons\"],{\"collapsed\":false,\"autoZIndex\":true,\"position\":\"topright\"}]},{\"method\":\"addPolylines\",\"args\":[[[[{\"lng\":[-0.8384997248649597,0.6686660745181143,0.2015217724256217,-0.6855831169523299,-0.9852011175826192,-0.06721300538629293,-0.004445222672075033,-0.4204655108042061,0.4657639740034938,0.5450430223718286],\"lat\":[51.28989229537547,51.67838042741641,51.73531959881075,51.19595673307776,51.98053967463784,51.74152152915485,51.05144627625123,51.53021246357821,51.69582387898117,51.68855600338429]}]]],null,\"Tracks\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#440154\",\"weight\":2,\"opacity\":1,\"fill\":false,\"fillColor\":\"#440154\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addCircleMarkers\",\"args\":[[51.28989229537547,51.67838042741641,51.73531959881075,51.19595673307776,51.98053967463784,51.74152152915485,51.05144627625123,51.53021246357821,51.69582387898117,51.68855600338429],[-0.8384997248649597,0.6686660745181143,0.2015217724256217,-0.6855831169523299,-0.9852011175826192,-0.06721300538629293,-0.004445222672075033,-0.4204655108042061,0.4657639740034938,0.5450430223718286],4,null,\"Tracks\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"black\",\"weight\":1,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"#FFF5F0\",\"#FEE2D5\",\"#FDC3AC\",\"#FDA081\",\"#FC7C5C\",\"#F6573D\",\"#E33127\",\"#C2161B\",\"#9E0D14\",\"#67000D\"],\"fillOpacity\":0.8},null,null,null,null,[\"ID: A<br>Time: 2023-01-01 00:00:00\",\"ID: A<br>Time: 2023-01-02 00:00:00\",\"ID: A<br>Time: 2023-01-03 00:00:00\",\"ID: A<br>Time: 2023-01-04 00:00:00\",\"ID: A<br>Time: 2023-01-05 00:00:00\",\"ID: A<br>Time: 2023-01-06 00:00:00\",\"ID: A<br>Time: 2023-01-07 00:00:00\",\"ID: A<br>Time: 2023-01-08 00:00:00\",\"ID: A<br>Time: 2023-01-09 00:00:00\",\"ID: A<br>Time: 2023-01-10 00:00:00\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolylines\",\"args\":[[[[{\"lng\":[1.749201321508735,0.3498812536709011,0.06848266534507275,0.6407714616507292,0.804656476713717,0.391339669469744,0.8070762348361313,0.127322914544493,0.777402626350522,1.951095670461655],\"lat\":[51.53123032534495,51.72556253452785,51.80083080613986,52.13646561489441,51.97902454971336,51.93217125814408,52.20643383776769,52.44857657630928,51.68033876805566,51.71689987648278]}]]],null,\"Tracks\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#FDE725\",\"weight\":2,\"opacity\":1,\"fill\":false,\"fillColor\":\"#FDE725\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addCircleMarkers\",\"args\":[[51.53123032534495,51.72556253452785,51.80083080613986,52.13646561489441,51.97902454971336,51.93217125814408,52.20643383776769,52.44857657630928,51.68033876805566,51.71689987648278],[1.749201321508735,0.3498812536709011,0.06848266534507275,0.6407714616507292,0.804656476713717,0.391339669469744,0.8070762348361313,0.127322914544493,0.777402626350522,1.951095670461655],4,null,\"Tracks\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"black\",\"weight\":1,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"#FFF5F0\",\"#FEE2D5\",\"#FDC3AC\",\"#FDA081\",\"#FC7C5C\",\"#F6573D\",\"#E33127\",\"#C2161B\",\"#9E0D14\",\"#67000D\"],\"fillOpacity\":0.8},null,null,null,null,[\"ID: B<br>Time: 2023-01-01 00:00:00\",\"ID: B<br>Time: 2023-01-02 00:00:00\",\"ID: B<br>Time: 2023-01-03 00:00:00\",\"ID: B<br>Time: 2023-01-04 00:00:00\",\"ID: B<br>Time: 2023-01-05 00:00:00\",\"ID: B<br>Time: 2023-01-06 00:00:00\",\"ID: B<br>Time: 2023-01-07 00:00:00\",\"ID: B<br>Time: 2023-01-08 00:00:00\",\"ID: B<br>Time: 2023-01-09 00:00:00\",\"ID: B<br>Time: 2023-01-10 00:00:00\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[51.05144627625123,52.44857657630928],\"lng\":[-0.9852011175826192,1.951095670461655]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reference/ez_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize animal tracking data — ez_summary","title":"Summarize animal tracking data — ez_summary","text":"Calculate basic summary statistics per tracked individual. function useful quickly understanding data coverage, gaps, movement distance animal.","code":""},{"path":"/reference/ez_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize animal tracking data — ez_summary","text":"","code":"ez_summary(data, start_date = NULL, end_date = NULL, report = FALSE)"},{"path":"/reference/ez_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize animal tracking data — ez_summary","text":"data data frame sf object columns `id`, `timestamp`, `x`, `y`. start_date Optional. `Date` object string (e.g., \"2021-01-01\"). Filters data date. end_date Optional. `Date` object string (e.g., \"2021-01-15\"). Filters data date. report Logical. TRUE, opens HTML summary table browser easy copying slides documents.","code":""},{"path":"/reference/ez_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize animal tracking data — ez_summary","text":"data frame summary statistics per `id`, HTML table `report = TRUE`.","code":""},{"path":"/reference/ez_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize animal tracking data — ez_summary","text":"following summary statistics returned unique `id`: `n_fixes`: Number location records `first_location`: Timestamp first recorded location `last_location`: Timestamp last recorded location `tracking_duration_days`: Duration first last fix (days) `fixes_per_day`: Average number fixes per day `median_interval_hours`: Median interval fixes (hours) `max_time_gap_days`: Longest time gap consecutive fixes (days) `distance_km`: Total distance traveled (kilometers), calculated using Haversine formula `avg_speed_kmh`: Average speed (km/h), computed distance divided tracking duration hours","code":""},{"path":"/reference/ez_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize animal tracking data — ez_summary","text":"","code":"data(godwit_tracks) clean <- ez_track(godwit_tracks) #> Detected columns - id: individual.local.identifier, timestamp: timestamp, x: location.long, y: location.lat #> Removed 852 row(s) with missing or duplicate values. ez_summary(clean) #>        id n_fixes      first_location       last_location #> 1 animal1    1095 2024-12-31 16:00:00 2025-04-25 14:00:00 #> 2 animal2    1153 2024-12-31 16:00:00 2025-04-27 22:00:00 #> 3 animal3    1022 2024-12-31 16:00:00 2025-04-23 16:00:00 #> 4 animal4     214 2024-12-31 16:00:00 2025-04-27 16:00:00 #> 5 animal5     223 2024-12-31 16:00:00 2025-04-27 16:00:00 #> 6 animal6     551 2024-12-31 16:00:00 2025-04-27 16:00:00 #>   tracking_duration_days fixes_per_day median_interval_hours max_time_gap_days #> 1                 114.92          9.53                     2              0.33 #> 2                 117.25          9.83                     2              1.00 #> 3                 113.00          9.04                     2              1.00 #> 4                 117.00          1.83                     6             10.00 #> 5                 117.00          1.91                     6             13.38 #> 6                 117.00          4.71                     4              1.00 #>   distance_km avg_speed_kmh #> 1     5649.19          2.05 #> 2     5495.39          1.95 #> 3     6370.80          2.35 #> 4     2414.07          0.86 #> 5     2372.16          0.84 #> 6     5438.92          1.94"},{"path":"/reference/ez_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a clean tracking object — ez_track","title":"Create a clean tracking object — ez_track","text":"Imports standardizes tracking data tidy format columns: `id`, `timestamp`, `x`, `y`. Supports input data frames, `sf`, `sp` objects, file paths csv, xlsx, shp, gpkg. Optionally returns spatial object projected WGS84 (EPSG:4326), supports subsampling (e.g., \"1 per hour\").","code":""},{"path":"/reference/ez_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a clean tracking object — ez_track","text":"","code":"ez_track(   data,   format = NULL,   tz = \"UTC\",   crs = 4326,   as_sf = TRUE,   id = NULL,   timestamp = NULL,   x = NULL,   y = NULL,   keep_original_cols = TRUE,   subsample = \"none\",   verbose = TRUE,   ... )"},{"path":"/reference/ez_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a clean tracking object — ez_track","text":"data tracking dataset file path. Accepted types: `data.frame`, `sf`, `sp`, path \"csv\", \"xlsx\", \"shp\", \"gpkg\". format Optional. File format override detection. Choices: \"csv\", \"xlsx\", \"shp\", \"gpkg\". tz Timezone timestamps. Default \"UTC\". crs EPSG code proj4string input CRS. Default 4326 (WGS84). as_sf Logical. Return `sf` object? Default TRUE. id Optional. Column name id. timestamp Optional. Column name timestamp. x Optional. Column name longitude. y Optional. Column name latitude. keep_original_cols Logical. FALSE, drops non-standard columns retains `id`, `timestamp`, `x`, `y`. Default TRUE. subsample Optional. Specify many fixes keep per time unit. can use positive integer `\"hour\"` `\"day\"` unit  (e.g.,`\"1 per hour\"` `\"2 per day\"`). verbose Logical. Print messages? Default TRUE. ... Passed read function.","code":""},{"path":"/reference/ez_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a clean tracking object — ez_track","text":"data.frame `sf` object columns `id`, `timestamp`, `x`, `y`.","code":""},{"path":"/reference/godwit_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Godwit Tracking Dataset — godwit_tracks","title":"Example Godwit Tracking Dataset — godwit_tracks","text":"dataset godwit tracking data used example ezTrack functions.","code":""},{"path":"/reference/godwit_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Godwit Tracking Dataset — godwit_tracks","text":"","code":"data(godwit_tracks)"},{"path":"/reference/godwit_tracks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Godwit Tracking Dataset — godwit_tracks","text":"data frame columns: individual.local.identifier Unique identifier tracked animal timestamp Datetime location fix location.long Longitude coordinate (WGS84) location.lat Latitude coordinate (WGS84)","code":""},{"path":"/reference/godwit_tracks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Godwit Tracking Dataset — godwit_tracks","text":"Movebank","code":""},{"path":"/reference/godwit_tracks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Godwit Tracking Dataset — godwit_tracks","text":"","code":"data(godwit_tracks) godwit_tracks <- ez_track(godwit_tracks) #> Detected columns - id: individual.local.identifier, timestamp: timestamp, x: location.long, y: location.lat #> Removed 852 row(s) with missing or duplicate values. ez_summary(godwit_tracks) #>        id n_fixes      first_location       last_location #> 1 animal1    1095 2024-12-31 16:00:00 2025-04-25 14:00:00 #> 2 animal2    1153 2024-12-31 16:00:00 2025-04-27 22:00:00 #> 3 animal3    1022 2024-12-31 16:00:00 2025-04-23 16:00:00 #> 4 animal4     214 2024-12-31 16:00:00 2025-04-27 16:00:00 #> 5 animal5     223 2024-12-31 16:00:00 2025-04-27 16:00:00 #> 6 animal6     551 2024-12-31 16:00:00 2025-04-27 16:00:00 #>   tracking_duration_days fixes_per_day median_interval_hours max_time_gap_days #> 1                 114.92          9.53                     2              0.33 #> 2                 117.25          9.83                     2              1.00 #> 3                 113.00          9.04                     2              1.00 #> 4                 117.00          1.83                     6             10.00 #> 5                 117.00          1.91                     6             13.38 #> 6                 117.00          4.71                     4              1.00 #>   distance_km avg_speed_kmh #> 1     5649.19          2.05 #> 2     5495.39          1.95 #> 3     6370.80          2.35 #> 4     2414.07          0.86 #> 5     2372.16          0.84 #> 6     5438.92          1.94 ez_home_range(godwit_tracks) #> Registered S3 methods overwritten by 'adehabitatMA': #>   method                       from #>   print.SpatialPixelsDataFrame sp   #>   print.SpatialPixels          sp   #> Simple feature collection with 6 features and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -16.45874 ymin: 11.95901 xmax: 5.57653 ymax: 53.17665 #> Geodetic CRS:  WGS 84 #>              id      area                       geometry #> animal1 animal1  89185226 POLYGON ((4.66992 51.83778,... #> animal2 animal2  82528362 POLYGON ((5.54264 53.13103,... #> animal3 animal3 129637936 POLYGON ((5.57594 53.00143,... #> animal4 animal4   9354404 POLYGON ((-1.24669 46.39655... #> animal5 animal5  32545484 POLYGON ((3.50269 43.32241,... #> animal6 animal6 134196192 POLYGON ((-0.2713 39.24599,..."},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"Re-export magrittr pipe use user scripts.","code":""}]
